# -*- encoding: utf-8 -*-

task :default => :dump

desc 'Dump and merge dnsmasq host cache'
task :dump do
  require 'set'
  require 'etc'
  require 'fileutils'

  pid = %x(ps axo pid,ucomm).lines.find { |l| l.strip =~ /\bdnsmasq\z/ }.to_i
  return if pid.zero?

  # Create a table of hostnames to addresses, eliding any aliases of localhost
  parse_hosts = lambda do |buf|
    hosts, locals = {}, Set.new(%w[127.0.0.1 ::1 0.0.0.0 ::])
    buf.lines.each do |l|
      addr, host = l.chomp.split "\t"
      next if locals.include? addr
      hosts[host] ||= Set.new
      hosts[host] << addr
    end
    hosts
  end

  # Record current cache
  cache = File.expand_path 'hosts.cache'
  hosts = File.exists?(cache) ? parse_hosts.call(File.read cache) : {}

  # Send USR1 and wait for dnsmasq to close the cache file
  user = Etc.getpwnam 'dnsmasq'
  FileUtils.touch cache
  File.chown user.uid, user.gid, cache
  Process.kill 'SIGUSR1', pid
  sleep 0.1 until %x(lsof -p #{pid} 2>/dev/null).lines.grep(Regexp.new cache).empty?

  # Merge old cache records with new ones so we don't lose any records
  hosts.merge! parse_hosts.call(File.read cache)
  File.open cache, 'w' do |f|
    f.puts hosts.sort.reduce('') { |buf, (host, addrs)|
      buf << addrs.sort.map { |a| "#{a}\t#{host}\n" }.join
    }
  end
end

def blacklisted? blacklist, host
  h0, h1, h2, _ = host
  blacklist.each do |bhost|
    b0, b1, b2, _ = bhost
    case host.size
    when 1 then return true if b0 === h0
    when 2 then return true if b0 === h0 and b1 === h1
    else        return true if b0 === h0 and b1 === h1 and b2 === h2
    end
  end
  false
end

def name host
  host.reverse.join '.'
end

desc 'Create a dnsmasq whitelist conf file from hosts.cache'
task :whitelist do
  require 'set'

  # Host to direct whitelisted DNS queries
  nameserver = '192.168.1.1'

  # Domains that should never enter the whitelist.
  #
  # Each entry must be an array of three case matchers (i.e. match is done
  # with ===) that correspond to the top three levels of a domain name in
  # hierarchical order.
  blacklist = [
    # ['com', 'google', /\A(www|images|video)\z/],
    # ['xxx',      /./,                      /./]
  ]

  # Cached hosts as arrays of hierarchical domains
  hosts = File.readlines('hosts.cache').map do |l|
    l.strip.split.last.split('.').reverse
  end

  oldlist = if File.exists? 'whitelist.conf'
    File.readlines('whitelist.conf').map { |l| l[%r{/(.*)/}, 1] }
  else
    []
  end

  # Reduce cached hosts to a set of secondary domains. If the secondary domain
  # is blacklisted and the tertiary domain is not, then the tertiary domain is
  # added instead.
  whitelist = hosts.reduce Set.new(oldlist) do |s, host|
    # Don't add TLDs
    if host.size < 2
      warn "Rejecting #{name host}"
      s
    # Try the secondary first
    elsif blacklisted? blacklist, host.take(2)
      # Then try the tertiary (when in doubt, use brute force)
      if blacklisted? blacklist, host.take(3)
        warn "Rejecting #{name host}"
        s
      else
        s << name(host.take 3)
      end
    else
      s << name(host.take 2)
    end
  end

  File.open 'whitelist.conf', 'w' do |f|
    f.puts whitelist.map { |host| "server=/#{host}/#{nameserver}" }.sort
  end
end
